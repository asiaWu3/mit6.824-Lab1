package main

//
// a word-count application "plugin" for MapReduce.
//
// go build -buildmode=plugin wc.go
//

import (
	"project/6.824/src/mr"
)
import "unicode"
import "strings"
import "strconv"

// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
// "map"函数针对输入的每个文件调用一次，第一个参数是输入文件的名字，第二个参数是文件的完整内容
// 你需要忽略输入文件的名字，只关注内容，返回值是 Key/Value 对的切片
func Map(filename string, contents string) []mr.KeyValue {
	// function to detect word separators.
	//一个方法用于判断传入的字符是不是字母，如果不是字母返回true
	ff := func(r rune) bool { return !unicode.IsLetter(r) }

	// split contents into an array of words.
	//联合ff方法将contents分割成一个个单词
	words := strings.FieldsFunc(contents, ff)

	kva := []mr.KeyValue{}
	for _, w := range words {
		kv := mr.KeyValue{w, "1"}
		kva = append(kva, kv)
	}
	return kva
}

// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
// Reduce 函数针对 Map 任务生成的每个键（key）调用一次，
// 其中包含由任何 Map 任务创建的属于该键的所有值（value）列表。
// 简言之，Reduce 函数接收到的是同一个键（key）所对应的所有值（value）集合，而这些值（value）来自于不同的 Map 任务。
func Reduce(key string, values []string) string {
	// return the number of occurrences of this word.
	return strconv.Itoa(len(values))
}
